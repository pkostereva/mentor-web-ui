import { NextResponse } from "next/server";
import { supabase } from "../../../lib/supabaseClient";
import OpenAI from "openai";

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

export async function POST() {
  try {
    // 1Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–ø—Ä–æ—Ö–æ–¥–∏–≤—à—É—é —Ç–µ–º—É
    const { data: topics, error: topicsError } = await supabase
      .from("topics")
      .select("*")
      .order("order_index", { ascending: true });

    if (topicsError) throw topicsError;

    const { data: progress } = await supabase
      .from("progress")
      .select("topic_id");
    const completedIds = new Set(progress?.map((p) => p.topic_id));
    const nextTopic = topics.find((t) => !completedIds.has(t.id));

    if (!nextTopic)
      return NextResponse.json({
        success: false,
        message: "–í—Å–µ —Ç–µ–º—ã —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω—ã üéâ",
      });

    // 2Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–¥–∞–Ω–∏–µ –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ
    const prompt = `
–¢—ã ‚Äî –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI-–º–µ–Ω—Ç–æ—Ä –ø–æ C# –∏ .NET, –ø–æ–º–æ–≥–∞—é—â–∏–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É —É—Ä–æ–≤–Ω—è Middle –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é —Ñ–æ—Ä–º—É –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è–º.

–ö–æ–Ω—Ç–µ–∫—Å—Ç —É—á–µ–Ω–∏–∫–∞:
- –ë—ç–∫–≥—Ä–∞—É–Ω–¥: C#, ASP.NET, MS SQL, PostgreSQL, Docker, Event Sourcing, DDD, Kafka, RabbitMQ.
- –ü–æ—Å–ª–µ –¥–≤—É—Ö–ª–µ—Ç–Ω–µ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞–≤—ã–∫–∏, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∏ —Å–∏—Å—Ç–µ–º–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ.
- –¶–µ–ª—å: –ø—Ä–æ–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è –Ω–∞ Middle+/Senior .NET Developer, –±—ã—Ç—å –≥–æ—Ç–æ–≤–æ–π –∫ –≤–æ–ø—Ä–æ—Å–∞–º –ø–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ, –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º –∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç–∏.
- –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç —Å–ø–æ–∫–æ–π–Ω—ã–π —Ç–µ–º–ø, —Å—Ç—Ä—É–∫—Ç—É—Ä—É, –∏ —á—Ç–æ–±—ã –≤—Å—ë –∏–º–µ–ª–æ –ø–æ–Ω—è—Ç–Ω—É—é –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫—É—é —Ü–µ–ª—å.

–¢–≤–æ—è —Ä–æ–ª—å:
–¢—ã ‚Äî –Ω–µ –ø—Ä–æ—Å—Ç–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∑–∞–¥–∞—á, –∞ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —á–µ—Ä–µ–¥—É–µ—Ç —Ä–∞–∑–Ω—ã–µ –≤–∏–¥—ã –ø—Ä–∞–∫—Ç–∏–∫–∏, —á—Ç–æ–±—ã —Ä–∞–∑–≤–∏–≤–∞—Ç—å –∫–∞–∫ –º—ã—à–ª–µ–Ω–∏–µ, —Ç–∞–∫ –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å.
–ö–∞–∂–¥–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–º, —Å –æ—â—É—â–µ–Ω–∏–µ–º –ø–æ–ª—å–∑—ã –∏ –¥–≤–∏–∂–µ–Ω–∏—è –≤–ø–µ—Ä—ë–¥.

–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –æ–¥–Ω–æ –∑–∞–¥–∞–Ω–∏–µ –ø–æ —Ç–µ–º–µ "${nextTopic.title}".
–¢–∏–ø –∑–∞–¥–∞–Ω–∏—è –≤—ã–±–∏—Ä–∞–π —Å–ª—É—á–∞–π–Ω–æ (–∏–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–º—ã), –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö:

1. **–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞ (–∫–æ–¥)** ‚Äî —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —á–∞—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã, –∞–ª–≥–æ—Ä–∏—Ç–º, API, –ø–∞—Ç—Ç–µ—Ä–Ω –∏–ª–∏ —Å–µ—Ä–≤–∏—Å.
2. **–†–µ–≤—å—é –∫–æ–¥–∞ —Å –ø–æ–¥–≤–æ—Ö–∞–º–∏** ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç –∫–æ–¥–∞ —Å –ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏/–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–º–∏ –æ—à–∏–±–∫–∞–º–∏ –∏ –ø–æ–ø—Ä–æ—Å–∏ –Ω–∞–π—Ç–∏ –ø—Ä–æ–±–ª–µ–º—ã.
3. **–ü–∏—Å—å–º–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å —Å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è** ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–±—ä—è—Å–Ω–∏ async/await, –æ—Ç–ª–∏—á–∏—è IEnumerable –∏ IQueryable, –∂–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª –æ–±—ä–µ–∫—Ç–∞ –∏ —Ç.–¥.
4. **–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π** ‚Äî —Å–ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É, –æ–±—ä—è—Å–Ω–∏—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω—ã, –æ–±–æ—Å–Ω–æ–≤–∞—Ç—å –≤—ã–±–æ—Ä —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π.
5. **–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π** ‚Äî C# vs Go –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, LINQ vs SQL, REST vs gRPC, EF Core vs Dapper –∏ —Ç.–¥.
6. **–ê–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞** ‚Äî —É—Ä–æ–≤–µ–Ω—å LeetCode Easy/Medium, –Ω–æ —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º –ø–æ–¥—Ö–æ–¥–∞ –∏ –∞–Ω–∞–ª–∏–∑–æ–º —Å–ª–æ–∂–Ω–æ—Å—Ç–∏.
7. **–î–µ–±—Ä–∏—Ñ–∏–Ω–≥** ‚Äî ‚Äú–æ–ø–∏—à–∏ —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏, —á—Ç–æ –¥–µ–ª–∞–µ—Ç —ç—Ç–æ—Ç —Ñ—Ä–∞–≥–º–µ–Ω—Ç‚Äù, ‚Äú–æ–±—ä—è—Å–Ω–∏, –ø–æ—á–µ–º—É —ç—Ç–æ—Ç –ø–æ–¥—Ö–æ–¥ –ª—É—á—à–µ‚Äù.
8. **–í–æ–ø—Ä–æ—Å –Ω–∞ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–µ** ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä, ‚Äú–∫–∞–∫ –±—ã —Ç—ã —Å–ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–ª –º–æ–¥—É–ª—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤?‚Äù.

–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ (Markdown):
### –¢–∏–ø –∑–∞–¥–∞–Ω–∏—è:
(—É–∫–∞–∂–∏ —Ç–∏–ø, –Ω–∞–ø—Ä–∏–º–µ—Ä, "–†–µ–≤—å—é –∫–æ–¥–∞", "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞", "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–µ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ" –∏ —Ç.–¥.)

### –ù–∞–∑–≤–∞–Ω–∏–µ:
(–∫—Ä–∞—Ç–∫–æ –∏ —ë–º–∫–æ, –∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ)

### –¶–µ–ª—å:
–ó–∞—á–µ–º —ç—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è –∏ –∫–∞–∫ —Å–≤—è–∑–∞–Ω–æ —Å —Ä–µ–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–æ–π.

### –û–ø–∏—Å–∞–Ω–∏–µ:
–ö–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏, —É—Å–ª–æ–≤–∏—è, —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è, –∏–ª–∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç –∫–æ–¥–∞ (–µ—Å–ª–∏ —ç—Ç–æ —Ä–µ–≤—å—é).

### –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é:
–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å, –æ–±—ä—è—Å–Ω–∏—Ç—å, –∏—Å–ø—Ä–∞–≤–∏—Ç—å, —Å–ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –Ω–∞–ø–∏—Å–∞—Ç—å –æ—Ç–≤–µ—Ç –∏ —Ç.–ø.

### –ö—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ü–µ–Ω–∫–∏:
–ß—Ç–æ –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç—Å—è: –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å, –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ü–∏—è, —á–∏—Å—Ç–æ—Ç–∞, –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ, async, SQL –∏ —Ç.–¥.

### –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –º–µ–Ω—Ç–æ—Ä–∞:
1‚Äì3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç —Ç–µ–±—è, –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞ ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∫–∞, –∞–∫—Ü–µ–Ω—Ç –Ω–∞ —Ä–æ—Å—Ç –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å.

–¢–æ–Ω:
- –°–ø–æ–∫–æ–π–Ω—ã–π, —É–≤–µ—Ä–µ–Ω–Ω—ã–π, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π.
- –ë–µ–∑ —Å—é—Å—é–∫–∞–Ω—å—è –∏ –¥–∞–≤–ª–µ–Ω–∏—è.
- –°—Ç–∏–ª—å: ¬´–¥–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä—ë–º—Å—è –≤–º–µ—Å—Ç–µ, —Ç—ã —Å–ø—Ä–∞–≤–∏—à—å—Å—è¬ª.
`;

    const completion = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [{ role: "user", content: prompt }],
    });

    const description = completion.choices[0].message.content.trim();

    // 3Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –≤ Supabase
    const { data: newTask, error: taskError } = await supabase
      .from("tasks")
      .insert({
        topic_id: nextTopic.id,
        topic: nextTopic.title,
        description,
        status: "new",
      })
      .select()
      .single();

    if (taskError) throw taskError;

    // 4Ô∏è‚É£ –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    return NextResponse.json({
      success: true,
      task: newTask,
      topic: nextTopic,
    });
  } catch (error) {
    console.error("Next topic error:", error);
    return NextResponse.json({ success: false, error: error.message });
  }
}
