import { NextResponse } from "next/server";
import { supabase } from "@/lib/supabaseClient";

// üîí –ø—Ä–æ—Å—Ç–µ–π—à–∞—è –∑–∞—â–∏—Ç–∞ ‚Äî —Ç—Ä–µ–±—É–µ–º —Å–µ–∫—Ä–µ—Ç
const CRON_SECRET = process.env.CRON_SECRET;

export async function GET(request) {
  const auth = request.headers.get("authorization");
  if (!auth || auth !== `Bearer ${CRON_SECRET}`) {
    return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
  }

  const now = new Date();

  // —á–∏—Ç–∞–µ–º prefs
  const { data: prefs, error } = await supabase
    .from("user_prefs")
    .select("*")
    .single();

  if (error || !prefs) {
    console.error("user_prefs error", error);
    return NextResponse.json({ error: "No prefs" }, { status: 500 });
  }

  // –ø—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω–æ –ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
  const dayIndex = now.getDay(); // 0=–≤—Å
  const isWeekday = prefs.weekdays?.[dayIndex] ?? false;
  if (!isWeekday || !prefs.reminders_enabled) {
    return NextResponse.json({ skipped: "disabled or weekend" });
  }

  // –≤—Ä–µ–º—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
  const [hours, minutes] = prefs.daily_time.split(":").map(Number);
  const scheduled = new Date(now);
  scheduled.setHours(hours, minutes, 0, 0);
  if (now < scheduled) {
    return NextResponse.json({ skipped: "too early" });
  }

  // –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ (–ø—Ä–æ—Å—Ç–µ–π—à–∏–π –ø—Ä–∏–º–µ—Ä)
  const { error: insertError } = await supabase.from("tasks").insert({
    topic: "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ",
    description: "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∞–≥–µ–Ω—Ç–æ–º –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.",
    status: "new",
  });

  if (insertError) {
    console.error(insertError);
    return NextResponse.json({ error: "Insert failed" }, { status: 500 });
  }

  return NextResponse.json({ success: true });
}
